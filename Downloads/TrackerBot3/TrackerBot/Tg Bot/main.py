from typing import List, Any

import telebot
import sqlite3
from telebot import types
from time import sleep
from sheet import users
from Dicts import main2
main_dict = {}
main2()

from Dicts import lessons_dict, mentors_dict, participation_stage_dict
lessons = []
def main():
    token = '5846254841:AAE9hO3V9sbtkOYZeODrCdoYKvVB1FscC1I'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    bot = telebot.TeleBot(token)

    db = sqlite3.connect("Data_Bases//Users.db",
                         check_same_thread=False)  # –°–æ–∑–¥–∞—ë–º –±–¥ —Å id —á–∞—Ç–æ–≤ –∏ –∫–∞–∫–∏–µ –∏–º–µ–Ω–∞ –∫ –Ω–∏–º –ø—Ä–∏–≤—è–∑–∞–Ω—ã
    cursor = db.cursor()


    db_olympiad = sqlite3.connect("Data_Bases//RsOS.db",
                                  check_same_thread=False)  # –°–æ–∑–¥–∞—ë–º –±–¥ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    # –æ–ª–∏–º–ø–∏–∞–¥–æ–π, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –Ω–∞–ø–∏—Å–∞–ª, –ø—Ä–µ–¥–º–µ—Ç–æ–º –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–∏—Å–∞–ª –æ–ª–∏–º–ø–∏–∞–¥—É, —ç—Ç–∞–ø –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
    cursor_olymp = db_olympiad.cursor()

    olympiad_lst = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥
    olympiad_dict = {}  # –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –æ–ª–∏–º–ø–∏–∞–¥—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã
    c = 0

    olympiad = users("ROWS", "A1:B500", "read")
    for i in olympiad:
        if len(i[0]) == 1:
            i[0] = "0" + i[0]
        if i[0] not in olympiad_dict:
            olympiad_dict[i[0]] = [i[1]]
        else:
            olympiad_dict[i[0]].append([i[1]])
    olympiad = sorted(olympiad, key=lambda x: x[1])
    string = ''
    for i in olympiad:
        if "–ù–¢–û:" not in i[1]:
            i[0] += ":"
        if c <= 15:
            string += " ".join(i)
            c += 1
        else:
            olympiad_lst.append(string)
            string, c = " ".join(i), 0
        string += "\n" + " " + "\n"
    olympiad_lst.append(string)



    @bot.message_handler(commands=['start'])  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É start
    def start_message(message):
        global user_chat_id
        user_chat_id = message.chat.id
        cursor.execute(f"SELECT chat_id FROM user WHERE chat_id = '{message.chat.id}'")
        # –ò—â–µ–º id —á–∞—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–º –Ω–∞–ø–∏—Å–∞–ª–∏

        if cursor.fetchone() is None:  # –ï—Å–ª–∏ —Ç–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞–º –Ω–µ –ø–∏—Å–∞–ª, —Ç–æ –∫ id –µ–≥–æ —á–∞—Ç–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∏–º—è,
            # –∞ –∑–Ω–∞—á–∏—Ç –º—ã –Ω–µ —Å–º–æ–∂–µ–º –∑–∞–Ω–æ—Å–∏—Ç—å –≤ –±–¥ –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏,
            # —Ç–æ–≥–¥–∞ –Ω–∞–º –Ω–∞–¥–æ —Å–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –∏–º—è –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ id –µ–≥–æ —á–∞—Ç–∞
            bot.send_message(message.chat.id,
                             "‚úå–ü—Ä–∏–≤–µ—Ç\n"
                             "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –†—Å–û–® —Ç—Ä–µ–∫–µ—Ä–∞\n\n"
                             "üîé–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")  # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                              "'–§–ò–û: *—Ç–≤–æ—ë –§–ò–û*'")  # –ó–∞–ø—Ä–æ—Å –§–ò–û

        else:  # –ï—Å–ª–∏ id —á–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–¥, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ–≥–¥–∞
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ –∏
            button_message(message)  # –í—ã–≤–æ–¥–∏–º –µ–º—É –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫

    def name(message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fio = message.text.split(': ')[1]  # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        cursor.execute(
            f"SELECT user_name FROM user WHERE user_name = '{fio}'")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∏–º—è –≤ –±–¥
        if cursor.fetchone() is None:  # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ–≥–¥–∞ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            cursor.execute('INSERT INTO user VALUES (?, ?, ?, ?)',
                           (None, message.chat.id, fio, 0))
            # –í–ø–∏—Å—ã–≤–∞–µ–º id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –§–ò–û –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª
            db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–¥

            bot.send_message(message.chat.id,
                             "‚úÖ–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")  # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            cursor_olymp.execute("""INSERT INTO olympiad_rating VALUES (?, ?, ?)""", (None, fio, 0))
            db_olympiad.commit()
            button_message(message)  # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        else:  # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å, —Ç–æ–≥–¥–∞
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")  # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å –∏
            button_message(message)  # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏

    def button_message(message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)  # –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é

        new_olymp_register = types.KeyboardButton("‚úèÔ∏è–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É")
        del_olympiad = types.KeyboardButton("üóë–£–¥–∞–ª–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        my_olymp = types.KeyboardButton("üìÑ–ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã")
        my_place = types.KeyboardButton("üèÜ–ú–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ")
        rename_user = types.KeyboardButton("üîÉ–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è")
        olymp_statick = types.KeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥")
        # new_register = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        markup.add(new_olymp_register, del_olympiad, my_olymp, my_place, rename_user,
                   olymp_statick)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
        bot.send_message(message.chat.id, '‚ùî–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=markup)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é

    def receive_user_name(message):
        cursor.execute(f"SELECT user_name FROM user WHERE chat_id = '{message.chat.id}'")
        user_name = cursor.fetchone()[0]
        return user_name

    def send_olympiad_list(message, ind):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥
        keyboard = types.InlineKeyboardMarkup()
        next_15 = types.InlineKeyboardButton(text="‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–µ 15", callback_data='next_15')
        past_15 = types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ü—Ä–æ—à–ª—ã–µ 15", callback_data='past_15')
        pick_olympiad = types.InlineKeyboardButton(text="‚úçÔ∏è–í—ã–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É", callback_data='pick_olympiad')

        # print(ind, len(olympiad_lst) - 1)
        if ind != len(olympiad_lst) - 1 and ind != 0:
            keyboard.add(past_15, next_15)
        elif ind == 0:
            keyboard.add(next_15)
        elif ind == len(olympiad_lst) - 1:
            keyboard.add(past_15)

        keyboard.add(pick_olympiad)

        bot.send_message(message.chat.id, olympiad_lst[ind], reply_markup=keyboard)

    def pick_olymp(message):
        name_user = receive_user_name(message)
        try:
            olympiad_name = olympiad_dict[message.text][0]

            if len(message.text.split('_')) == 1:
                main_dict[message.chat.id] = [name_user, olympiad_name]
                pick_lesson(message)
            else:
                main_dict[message.chat.id] = [name_user, olympiad_name]
                pick_participation_stage(message)
        except KeyError:
            print('–û–®–∏–±–∫–∞')
            bot.send_message(message.chat.id, f'–û–ª–∏–º–ø–∏–∞–¥—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')
            button_message(message)

    def pick_lesson(message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        list_of_subjects = []
        schet = 1
        for i in lessons_dict:
            list_of_subjects.append(
                types.InlineKeyboardButton(text=f"‚Äçüë®‚Äçüè´{lessons_dict[i]}", callback_data=f'lesson{schet}'))
            schet += 1
        keyboard.add(*list_of_subjects)
        olympiad_name = main_dict[message.chat.id][1]
        bot.send_message(message.chat.id, f'üìå–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–∏—à–µ—à—å {olympiad_name}', reply_markup=keyboard)

    def pick_participation_stage(message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        passed_registration = types.InlineKeyboardButton(text="‚úèÔ∏è–ü—Ä–æ—à—ë–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                                                         callback_data='passed_registration')
        wrote_qualifying = types.InlineKeyboardButton(text="üìù–ù–∞–ø–∏—Å–∞–ª –æ—Ç–±–æ—Ä–æ—á–Ω—ã–π —ç—Ç–∞–ø", callback_data='wrote_qualifying')
        passed_final = types.InlineKeyboardButton(text="üîù–ü—Ä–æ—à—ë–ª –Ω–∞ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø", callback_data='passed_final')
        took_final = types.InlineKeyboardButton(text="üèÖ–ü—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–∏–Ω–∞–ª–µ(—É—á–∞—Å—Ç–Ω–∏–∫)", callback_data='took_final')
        final_prize_winner = types.InlineKeyboardButton(text="ü•àü•â–ü—Ä–∏–∑—ë—Ä —Ñ–∏–Ω–∞–ª–∞(–¥–∏–ø–ª–æ–º 2 –∏–ª–∏ 3 —Å—Ç–µ–ø–µ–Ω–∏)",
                                                        callback_data='final_prize_winner')
        winner_of_final = types.InlineKeyboardButton(text="ü•á–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ñ–∏–Ω–∞–ª–∞(–¥–∏–ø–ª–æ–º 1 —Å—Ç–µ–ø–µ–Ω–∏)",
                                                     callback_data='winner_of_final')

        keyboard.add(passed_registration, wrote_qualifying, passed_final, took_final, final_prize_winner,
                     winner_of_final)

        olympiad_name = main_dict[message.chat.id][1]
        bot.send_message(message.chat.id,
                         "‚òëÔ∏è–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—É: " + olympiad_name +
                         '\n üìö–£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–ø —É—á–∞—Å—Ç–∏—è –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', reply_markup=keyboard)

    def pick_mentor(message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        schet = 1
        list_of_mentors = []
        for i in mentors_dict:
            list_of_mentors.append(
                types.InlineKeyboardButton(text=f"‚Äçüë®‚Äçüè´{mentors_dict[i]}", callback_data=f'mentor{schet}'))
            schet += 1
        keyboard.add(*list_of_mentors)
        bot.send_message(message.chat.id, 'üìå–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞', reply_markup=keyboard)

    def correct_chak_olymp(message):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        yes_button = types.InlineKeyboardButton(text="–î–∞", callback_data='correct')
        no_button = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='not_correct')
        keyboard.add(yes_button, no_button)

        name_user = main_dict[message.chat.id][0]
        olympiad_name = main_dict[message.chat.id][1]

        if '–ù–¢–û' in olympiad_name:
            part_stage = main_dict[message.chat.id][2]
            mentor = main_dict[message.chat.id][3]
            bot.send_message(message.chat.id,
                             f'üë¶–ò–º—è: {name_user}\n'
                             f'üèÜ–û–ª–∏–º–ø–∏–∞–¥–∞: {olympiad_name}\n'
                             f'üìö–ü—Ä–µ–¥–º–µ—Ç: -\n'
                             f'üìé–≠—Ç–∞–ø: {part_stage}\n'
                             f"üìå–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {mentor}", reply_markup=keyboard)
        else:
            lesson = main_dict[message.chat.id][2]
            part_stage = main_dict[message.chat.id][3]
            mentor = main_dict[message.chat.id][4]
            bot.send_message(message.chat.id,
                             f'üë¶–ò–º—è: {name_user}\n'
                             f'üèÜ–û–ª–∏–º–ø–∏–∞–¥–∞: {olympiad_name}\n'
                             f'üìö–ü—Ä–µ–¥–º–µ—Ç: {lesson}\n'
                             f'üìé–≠—Ç–∞–ø: {part_stage}\n'
                             f"üìå–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {mentor}", reply_markup=keyboard)

    def new_olymp_reg(message):
        name_user = main_dict[message.chat.id][0]
        olympiad_name = main_dict[message.chat.id][1]

        if '–ù–¢–û' in olympiad_name:
            part_stage = main_dict[message.chat.id][2]
            mentor = main_dict[message.chat.id][3]
            cursor_olymp.execute('INSERT INTO olympiad VALUES (?, ?, ?, ?, ?, ?)',
                                 (None, name_user, olympiad_name, '-', part_stage, mentor))
        else:
            lesson = main_dict[message.chat.id][2]
            part_stage = main_dict[message.chat.id][3]
            mentor = main_dict[message.chat.id][4]
            cursor_olymp.execute('INSERT INTO olympiad VALUES (?, ?, ?, ?, ?, ?)',
                                 (None, name_user, olympiad_name, lesson, part_stage, mentor))
        db_olympiad.commit()

    def user_olympiad_list(message):
        user_name = receive_user_name(message)
        cursor_olymp.execute("SELECT * FROM olympiad")
        massive_big = cursor_olymp.fetchall()
        user_olympiad_string = '<b>üìÑ–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥:</b>\n\n'
        schet = 1
        for i in range(len(massive_big)):
            if massive_big[i][1] == user_name:
                if '–ù–¢–û' in massive_big[i][2]:
                    user_olympiad_string += f'<b>{schet})üéØ–û–ª–∏–º–ø–∏–∞–¥–∞:</b> {massive_big[i][2]}\n' \
                                            f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> -\n' \
                                            f'<b>–≠—Ç–∞–ø:</b> {massive_big[i][4]}\n' \
                                            f'<b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {massive_big[i][5]}\n' \
                                            f'<b>–ò–Ω–¥–µ–∫—Å:</b> {massive_big[i][0]}\n\n'
                else:
                    user_olympiad_string += f'<b>{schet}) üéØ–û–ª–∏–º–ø–∏–∞–¥–∞:</b> {massive_big[i][2]}\n' \
                                            f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {massive_big[i][3]}\n' \
                                            f'<b>–≠—Ç–∞–ø:</b> {massive_big[i][4]}\n' \
                                            f'<b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {massive_big[i][5]}\n' \
                                            f'<b>–ò–Ω–¥–µ–∫—Å:</b> {massive_big[i][0]}\n\n'
                    schet += 1

        bot.send_message(message.chat.id, user_olympiad_string, parse_mode="HTML")

    def my_rating_place(message):
        name_user = receive_user_name(message)
        olympiad_counter_list = cursor_olymp.execute(f"SELECT * FROM olympiad_rating").fetchall()
        olympiad_counter_dict = {}

        for i in range(len(olympiad_counter_list)):
            olympiad_counter_dict[olympiad_counter_list[i][1]] = olympiad_counter_list[i][2]

        olympiad_counter_dict = {k: v for k, v in
                                 sorted(olympiad_counter_dict.items(), key=lambda item: item[1], reverse=True)}
        try:
            bot.send_message(message.chat.id, f'{name_user}:\n'
                                              f'–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {list(olympiad_counter_dict.keys()).index(name_user) + 1}\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ª–∏–º–ø–∏–∞–¥: {olympiad_counter_dict[name_user]}')
        except Exception:
            fio = cursor.execute(
                f"SELECT user_name FROM user WHERE chat_id = '{message.chat.id}'")
            cursor_olymp.execute("""INSERT INTO olympiad_rating VALUES (?, ?, ?)""", (None, fio, 0))
            db_olympiad.commit()
            my_rating_place(message)
        del olympiad_counter_dict
        button_message(message)

    def olympiad_rating(message):
        olympiad_counter_list = cursor_olymp.execute(f"SELECT * FROM olympiad_rating").fetchall()
        olympiad_counter_dict = {}

        for i in range(len(olympiad_counter_list)):
            olympiad_counter_dict[olympiad_counter_list[i][1]] = olympiad_counter_list[i][2]

        olympiad_counter_dict = {k: v for k, v in
                                 sorted(olympiad_counter_dict.items(), key=lambda item: item[1], reverse=True)}
        rating = ''
        schet = 1
        for k, v in olympiad_counter_dict.items():
            rating += f'<b>{schet}) {k}\n</b>' \
                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ª–∏–º–ø–∏–∞–¥: {v}\n'
            schet += 1

        bot.send_message(message.chat.id, rating, parse_mode='HTML')
        del olympiad_counter_dict
        button_message(message)

    def rename_user(message):
        past_user_name = receive_user_name(message)
        global new_user_name
        new_user_name = message.text

        cursor.execute(
            f"SELECT user_name FROM user WHERE user_name = '{new_user_name}'")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∏–º—è –≤ –±–¥
        if cursor.fetchone() is None:  # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ–≥–¥–∞ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            yes_button = types.InlineKeyboardButton(text="–î–∞", callback_data='yes_rename')
            no_button = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no_not_rename')
            keyboard.add(yes_button, no_button)

            bot.send_message(message.chat.id,
                             f'‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ÄºÔ∏è\n–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç–µ —Å–≤–æ—ë –§–ò–û, –≤—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã '
                             f'–Ω–∞ –Ω–æ–≤–æ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û\n\n–¢–µ–∫—É—â–µ–µ –§–ò–û:{past_user_name}\n–ù–æ–≤–æ–µ –§–ò–û: {new_user_name}\n\n'
                             f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–º—è –Ω–∞ –Ω–æ–≤–æ–µ?',
                             reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id,
                             '–¢–∞–∫–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–∞—à–µ –§–ò–û –Ω–∞ –¥—Ä—É–≥–æ–µ,'
                             '—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')
            button_message(message)

    def end_rename_user(message):
        past_user_name = receive_user_name(message)

        result_user = cursor.execute(f'SELECT id FROM user WHERE user_name="{past_user_name}"').fetchall()
        result_olympiad = cursor_olymp.execute(f'SELECT id FROM olympiad WHERE user_name="{past_user_name}"').fetchall()

        for user_id in result_user:  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            cursor.execute('UPDATE user SET user_name=? WHERE id=?',
                           (new_user_name, user_id[0]))  # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ user
            db.commit()

        for olympiad_id in result_olympiad:
            cursor_olymp.execute('UPDATE olympiad SET user_name=? WHERE id=?',
                                 (new_user_name, olympiad_id[0]))  # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.
            db_olympiad.commit()

        bot.send_message(message.chat.id, '–í–∞—à–µ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
        cursor_olymp.execute(
            'UPDATE olympiad_rating SET user_name=? WHERE user_name=?',
            (new_user_name, past_user_name))
        db_olympiad.commit()

    def del_olympiad(message):
        name_user = receive_user_name(message)
        len_do = cursor_olymp.execute('SELECT olympiad FROM olympiad WHERE user_name=?', (name_user,)).fetchall()
        cursor_olymp.execute("DELETE FROM olympiad WHERE id=?", (message.text,))
        db_olympiad.commit()

        len_posle = cursor_olymp.execute('SELECT olympiad FROM olympiad WHERE user_name=?', (name_user,)).fetchall()
        if len_do != len_posle:
            cursor_olymp.execute(
                'UPDATE olympiad_rating SET olympiad_counter=olympiad_counter - ? WHERE user_name=?',
                (1, name_user))
            db_olympiad.commit()
            bot.send_message(message.chat.id, f'–û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, f'–û–ª–∏–º–ø–∏–∞–¥—ã –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º {message.text} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥')
        button_message(message)

    @bot.callback_query_handler(func=lambda call: True)
    def answer(call):
        cursor.execute(f"SELECT olympiad_index FROM user WHERE chat_id = '{call.message.chat.id}'")
        olympiad_index = int(cursor.fetchone()[0])

        if call.data == 'next_15':
            bot.delete_message(call.message.chat.id, call.message.id)
            olympiad_index += 1
            cursor.execute(
                f"UPDATE user set olympiad_index = '{olympiad_index}' WHERE chat_id = '{call.message.chat.id}'")
            send_olympiad_list(call.message, olympiad_index)

        elif call.data == 'past_15':
            bot.delete_message(call.message.chat.id, call.message.id)
            olympiad_index -= 1
            cursor.execute(
                f"UPDATE user set olympiad_index = '{olympiad_index}' WHERE chat_id = '{call.message.chat.id}'")
            send_olympiad_list(call.message, olympiad_index)

        elif call.data == 'pick_olympiad':
            msg = bot.send_message(call.message.chat.id,
                                   'üìã–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —Ç–µ–±–µ –æ–ª–∏–º–ø–∏–∞–¥—ã\n\n–ï—Å–ª–∏ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∫–∞–∫–æ–π —Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –ù–¢–û, '
                                   '–Ω–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ')
            bot.register_next_step_handler(msg, pick_olymp)

        elif 'lesson' in call.data:
            name_user = receive_user_name(call.message)
            olympiad_name = main_dict[call.message.chat.id][1]
            lesson = lessons_dict[call.data]
            main_dict[call.message.chat.id].append(lesson)
            bot.delete_message(call.message.chat.id, call.message.id)
            pick_participation_stage(call.message)


        elif call.data in (
                'passed_registration', 'wrote_qualifying', 'passed_final', 'took_final', 'final_prize_winner',
                'winner_of_final'):
            name_user = main_dict[call.message.chat.id][0]
            olympiad_name = main_dict[call.message.chat.id][1]
            lesson = main_dict[call.message.chat.id][-1]
            all_olympiad = cursor_olymp.execute(f"SELECT * FROM olympiad WHERE user_name='{name_user}'").fetchall()
            flag = False

            for i in range(len(all_olympiad)):
                if all_olympiad[i][2] == olympiad_name and all_olympiad[i][3] == lesson and all_olympiad[i][4] == participation_stage_dict[call.data]:
                    flag = True
            if not flag:
                main_dict[call.message.chat.id].append(participation_stage_dict[call.data])
                bot.delete_message(call.message.chat.id, call.message.id)
                pick_mentor(call.message)
            else:
                bot.send_message(call.message.chat.id, f'–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ {olympiad_name} –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏ —É—á–∞—Å—Ç–∏—è\n\n')
                button_message(call.message)


        elif 'mentor' in call.data:
            main_dict[call.message.chat.id].append(mentors_dict[call.data])

            bot.delete_message(call.message.chat.id, call.message.id)
            correct_chak_olymp(call.message)

        elif call.data in ('correct', 'not_correct'):
            if call.data == 'correct':
                try:
                    new_olymp_reg(call.message)

                    bot.delete_message(call.message.chat.id, call.message.id)
                    bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—É')
                    lessons = []
                    name_user = receive_user_name(call.message)
                    cursor_olymp.execute(
                        'UPDATE olympiad_rating SET olympiad_counter=olympiad_counter + ? WHERE user_name=?',
                        (1, name_user))
                    db_olympiad.commit()
                    del main_dict[call.message.chat.id]
                    button_message(call.message)
                except EOFError:
                    bot.send_message(call.message.chat.id, f'–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')
            else:
                bot.send_message(call.message.chat.id, '–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞')
                button_message(call.message)

        elif call.data in ('yes_rename', 'no_not_rename'):
            if call.data == 'yes_rename':
                end_rename_user(call.message)
            else:
                bot.send_message(call.message.chat.id, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–º–µ–Ω–∏–ª–æ—Å—å')
                button_message(call.message)

    @bot.message_handler(content_types=['text'])
    def button_answer(message):
        text = message.text

        cursor.execute(f"SELECT chat_id FROM user WHERE chat_id = '{message.chat.id}'")
        if cursor.fetchone() is None:
            if '–§–ò–û' in message.text.split(': '):
                name(message)
        elif text == '‚úèÔ∏è–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É':
            send_olympiad_list(message, 0)
        elif text == "üóë–£–¥–∞–ª–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É":
            user_olympiad_list(message)
            msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ò–ù–î–ï–ö–° –æ–ª–∏–º–ø–∏–∞–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
            bot.register_next_step_handler(msg, del_olympiad)
        elif text == 'üìÑ–ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã':
            user_olympiad_list(message)
            button_message(message)
        elif text == 'üèÜ–ú–æ—ë –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ':
            my_rating_place(message)
        elif text == 'üîÉ–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û')
            bot.register_next_step_handler(msg, rename_user)
        elif text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥':
            olympiad_rating(message)

    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as _ex:
            print(_ex)
            sleep(15)


if __name__ == '__main__':
    main()
